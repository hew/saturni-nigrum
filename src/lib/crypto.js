// String obfuscation utilities
// This file contains the runtime decryption function

// Runtime decryption function - kept minimal to reduce obviousness
export const d = (arr, k=42) => String.fromCharCode(...arr.map(x => x ^ k));

// For arrays, decrypt and parse
export const da = (arr, k=42) => JSON.parse(d(arr, k));

// Build-time encryption function (for reference - not used in production)
// const encrypt = (str, key = 42) => {
//   return '[' + str.split('').map(char => 
//     '0x' + (char.charCodeAt(0) ^ key).toString(16)
//   ).join(',') + ']';
// };

// Pre-encrypted strings (encrypted with key 42)
export const S = {
  // "abracadabra"
  MAGIC: [0x63,0x5a,0x58,0x63,0x61,0x63,0x66,0x63,0x5a,0x58,0x63],
  
  // "666"
  BEAST: [0x1c,0x1c,0x1c],
  
  // "inhale"
  IN: [0x6b,0x54,0x6a,0x63,0x56,0x67],
  
  // "exhale"
  EX: [0x67,0x5c,0x6a,0x63,0x56,0x67],
  
  // "13"
  THIRTEEN: [0x19,0x1b],
  
  // "[0,1,3,5,2,4,6,7,9,11,8,10,12]" - FRUIT_OF_LIFE_ORDER
  SACRED_SEQ: [0x53,0x18,0x2e,0x19,0x2e,0x1b,0x2e,0x1d,0x2e,0x1a,0x2e,0x1c,0x2e,0x1e,0x2e,0x1f,0x2e,0x11,0x2e,0x19,0x19,0x2e,0x10,0x2e,0x19,0x18,0x2e,0x19,0x1a,0x55],
  
  // Golden ratio formula for obfuscation
  PHI_CALC: [0x28,0x19,0x2a,0x4d,0x63,0x58,0x66,0x54,0x24,0x57,0x58,0x5b,0x28,0x1d,0x29,0x29,0x25,0x1a], // "(1+Math.sqrt(5))/2"
  
  // Control hints
  TAP: [0x52,0x63,0x5e,0x28,0x5e,0x55,0x28,0x61,0x55,0x54,0x5e,0x58,0x55,0x56], // "Tap to control"
  DRAG: [0x46,0x58,0x63,0x6f,0x28,0x5e,0x55,0x28,0x58,0x55,0x5e,0x63,0x5e,0x67,0x28,0x03,0x28,0x52,0x63,0x5e,0x28,0x5e,0x55,0x28,0x58,0x67,0x56,0x67,0x63,0x5b,0x67], // "Drag to rotate â€¢ Tap to release"
  
  // Magic angles (as strings to be parsed)
  ANGLE_615: [0x18,0x24,0x1c,0x19,0x1d], // "0.615"
  ANGLE_666: [0x4d,0x63,0x5e,0x6a,0x24,0x50,0x4b,0x28,0x2c,0x28,0x18,0x24,0x1c,0x1c,0x1c], // "Math.PI * 0.666"
  ANGLE_1333: [0x4d,0x63,0x5e,0x6a,0x24,0x50,0x4b,0x28,0x2c,0x28,0x19,0x24,0x1b,0x1b,0x1b], // "Math.PI * 1.333"
  
  // Timing windows (as strings)
  TIME_13: [0x19,0x24,0x1b], // "1.3"
  TIME_15: [0x19,0x24,0x1d], // "1.5"
  TIME_17: [0x19,0x24,0x1f], // "1.7"
  TIME_20: [0x1a,0x24,0x18], // "2.0"
  
  // Action types
  ACT_CUBE: [0x55,0x54,0x56,0x55,0x61,0x7d,0x47,0x61,0x5a,0x67,0x47,0x5b,0x67,0x61,0x58,0x67,0x5e], // "UNLOCK_CUBE_SECRET"
  ACT_SAT: [0x55,0x54,0x56,0x55,0x61,0x7d,0x47,0x5b,0x63,0x5e,0x55,0x58,0x54,0x47,0x5b,0x67,0x61,0x58,0x67,0x5e], // "UNLOCK_SATURN_SECRET"
  ACT_TRI: [0x55,0x54,0x56,0x55,0x61,0x7d,0x47,0x5e,0x58,0x6b,0x54,0x6b,0x5e,0x49,0x47,0x5b,0x67,0x61,0x58,0x67,0x5e] // "UNLOCK_TRINITY_SECRET"
};

// Helper to get decrypted values with caching
const cache = new Map();
export const g = (key) => {
  if (!cache.has(key)) {
    cache.set(key, d(S[key]));
  }
  return cache.get(key);
};

// Get array value
export const ga = (key) => {
  const cacheKey = key + '_array';
  if (!cache.has(cacheKey)) {
    cache.set(cacheKey, da(S[key]));
  }
  return cache.get(cacheKey);
};

// Get number value
export const gn = (key) => parseFloat(g(key));

// Evaluate expression (for Math.PI expressions)
export const ge = (key) => {
  const expr = g(key);
  return Function('"use strict"; return (' + expr + ')')();
};